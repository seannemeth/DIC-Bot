generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Coach {
  id         String  @id @default(cuid())
  team       String  @unique
  discordId  String  @unique
  conference String?
  handle     String?        // <-- ADDED (used by /setteam)

  // Relations
  gamesHome  Game[]  @relation("home")
  gamesAway  Game[]  @relation("away")

  wallet     Wallet?
  purchases  Purchase[]
  upgrades   Upgrade[]
}

enum GameStatus {
  scheduled
  confirmed
  pending          // <-- used by loadschedule / score-listener
}

model Game {
  id           Int        @id @default(autoincrement())  // numeric id (your code expects number)
  season       Int
  week         Int
  homeTeam     String
  awayTeam     String
  homePts      Int?
  awayPts      Int?
  status       GameStatus @default(scheduled)
  messageId    String?    // <-- used by score-listener
  reportedById String?    // <-- used by score-listener
  channelId    String?    // <-- used by score-listener

  // relations to Coach (optional so you can import schedule first)
  homeCoachId  String?
  awayCoachId  String?

  homeCoach    Coach?     @relation("home", fields: [homeCoachId], references: [id])
  awayCoach    Coach?     @relation("away", fields: [awayCoachId], references: [id])

  @@unique([season, week, homeTeam, awayTeam])
}

model Wallet {
  id       Int     @id @default(autoincrement())
  coachId  String  @unique
  balance  Int     @default(500)
  season   Int     @default(1)

  coach    Coach   @relation(fields: [coachId], references: [id])
}

model Line {
  id        Int      @id @default(autoincrement())
  season    Int
  week      Int
  homeTeam  String
  awayTeam  String
  spread    Float?
  total     Float?
  homeML    Int?
  awayML    Int?
  cutoff    DateTime?
  createdAt DateTime @default(now())

  @@index([season, week, homeTeam, awayTeam])
}

model Bet {
  id        Int      @id @default(autoincrement())
  coachId   Int      // left as Int (no relation) to avoid code churn
  season    Int
  week      Int
  gameId    Int?
  market    String   // SPREAD|ML|TOTAL
  side      String   // HOME|AWAY|OVER|UNDER
  line      Float?
  amount    Int
  status    String   @default("open") // open|won|lost|push
  placedAt  DateTime @default(now())
  settledAt DateTime?
  payout    Int?
}

enum ItemType {
  COINS
  ATTR
  TOKEN
}

model Item {
  id          Int       @id @default(autoincrement())
  itemKey     String    @unique
  name        String
  description String?
  price       Int
  type        ItemType
  payload     Json?
  enabled     Boolean   @default(true)
  createdAt   DateTime  @default(now())

  purchases   Purchase[]
}

model Purchase {
  id          Int      @id @default(autoincrement())
  coachId     String
  itemId      Int
  qty         Int      @default(1)
  consumed    Int      @default(0)
  price       Int?
  note        String?
  purchasedAt DateTime @default(now())

  coach Coach @relation(fields: [coachId], references: [id])
  item  Item  @relation(fields: [itemId], references: [id])
}

model Upgrade {
  id        Int      @id @default(autoincrement())
  coachId   String
  attribute String
  amount    Int
  season    Int
  week      Int?
}

model StreamSub {
  id               String   @id @default(cuid())
  // 'youtube' | 'twitch'
  platform         String
  // YouTube: channelId  (e.g., UCxxxx); Twitch: login (e.g., shroud)
  channelKey       String
  // Owner (Discord user id)
  ownerDiscordId   String
  // Where to post alerts (Discord channel id). Fallback to LIVE_ALERT_CHANNEL_ID if null.
  discordChannelId String?
  // For duplicate suppression: last notified item id
  lastItemId       String?
  isLive           Boolean  @default(false)
  displayName      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([platform, channelKey])
  @@index([ownerDiscordId])
}

  note      String?
  createdAt DateTime @default(now())

  coach Coach @relation(fields: [coachId], references: [id])
}
